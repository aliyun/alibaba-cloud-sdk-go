package dysmsapi

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SendSmsGlobe invokes the dysmsapi.SendSmsGlobe API synchronously
// api document: https://www.alibabacloud.com/help/zh/doc-detail/106582.htm?spm=a2c63.p38356.b99.19.2ba27f30ht1zQg   on java to golang
func (client *Client) SendSmsGlobe(request *SendSmsGlobeRequest) (response *SendSmsGlobeResponse, err error) {
	response = CreateSendSmsGlobeResponse()
	request.Domain = "dysmsapi.ap-southeast-1.aliyuncs.com"
	err = client.DoAction(request, response)
	return
}

// SendSmsWithChanGlobe invokes the dysmsapi.SendSmsGlobe API asynchronously
// api document: https://www.alibabacloud.com/help/zh/doc-detail/106582.htm?spm=a2c63.p38356.b99.19.2ba27f30ht1zQg   on java to golang
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SendSmsWithChanGlobe(request *SendSmsGlobeRequest) (<-chan *SendSmsGlobeResponse, <-chan error) {
	responseChan := make(chan *SendSmsGlobeResponse, 1)
	request.Domain = "dysmsapi.ap-southeast-1.aliyuncs.com"
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SendSmsGlobe(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SendSmsWithCallbackGlobe invokes the dysmsapi.SendSmsGlobe API asynchronously
// api document: https://www.alibabacloud.com/help/zh/doc-detail/106582.htm?spm=a2c63.p38356.b99.19.2ba27f30ht1zQg   on java to golang
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) SendSmsWithCallbackGlobe(request *SendSmsGlobeRequest, callback func(response *SendSmsGlobeResponse, err error)) <-chan int {
	result := make(chan int, 1)
	request.Domain = "dysmsapi.ap-southeast-1.aliyuncs.com"
	err := client.AddAsyncTask(func() {
		var response *SendSmsGlobeResponse
		var err error
		defer close(result)
		response, err = client.SendSmsGlobe(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SendSmsGlobeRequest is the request struct for api SendSms
type SendSmsGlobeRequest struct {
	*requests.RpcRequest
	To      string `position:"Query" name:"To"`
	From    string `position:"Query" name:"From"`
	Message string `position:"Query" name:"Message"`
}

// SendSmsGlobeResponse is the response struct for api SendSms
type SendSmsGlobeResponse struct {
	*responses.BaseResponse
	MessageId           string `json:"MessageId" xml:"MessageId"`
	To                  string `json:"To" xml:"To"`
	From                string `json:"From" xml:"From"`
	ResponseCode        string `json:"ResponseCode" xml:"ResponseCode"`
	ResponseDescription string `json:"ResponseDescription" xml:"ResponseDescription"`
	Segments            string `json:"Segments" xml:"Segments"`
	NumberDetail        struct {
		Country string `json:"Country" xml:"Country"`
		Region  string `json:"Region" xml:"Region"`
		Carrier string `json:"Carrier" xml:"Carrier"`
	} `json:"NumberDetail" xml:"NumberDetail"`
}

// CreateSendSmsGlobeRequest creates a request to invoke SendSms API
func CreateSendSmsGlobeRequest() (request *SendSmsGlobeRequest) {
	request = &SendSmsGlobeRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dysmsapi", "2018-05-01", "SendMessageToGlobe", "dysms", "openAPI")
	return
}

// CreateSendSmsGlobeResponse creates a response to parse from SendSms response
func CreateSendSmsGlobeResponse() (response *SendSmsGlobeResponse) {
	response = &SendSmsGlobeResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
