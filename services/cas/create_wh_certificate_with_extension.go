package cas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateWHCertificateWithExtension invokes the cas.CreateWHCertificateWithExtension API synchronously
func (client *Client) CreateWHCertificateWithExtension(request *CreateWHCertificateWithExtensionRequest) (response *CreateWHCertificateWithExtensionResponse, err error) {
	response = CreateCreateWHCertificateWithExtensionResponse()
	err = client.DoAction(request, response)
	return
}

// CreateWHCertificateWithExtensionWithChan invokes the cas.CreateWHCertificateWithExtension API asynchronously
func (client *Client) CreateWHCertificateWithExtensionWithChan(request *CreateWHCertificateWithExtensionRequest) (<-chan *CreateWHCertificateWithExtensionResponse, <-chan error) {
	responseChan := make(chan *CreateWHCertificateWithExtensionResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateWHCertificateWithExtension(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateWHCertificateWithExtensionWithCallback invokes the cas.CreateWHCertificateWithExtension API asynchronously
func (client *Client) CreateWHCertificateWithExtensionWithCallback(request *CreateWHCertificateWithExtensionRequest, callback func(response *CreateWHCertificateWithExtensionResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateWHCertificateWithExtensionResponse
		var err error
		defer close(result)
		response, err = client.CreateWHCertificateWithExtension(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateWHCertificateWithExtensionRequest is the request struct for api CreateWHCertificateWithExtension
type CreateWHCertificateWithExtensionRequest struct {
	*requests.RpcRequest
	AppendCrl                requests.Boolean `position:"Query" name:"AppendCrl"`
	CountryCode              string           `position:"Query" name:"CountryCode"`
	CommonName               string           `position:"Query" name:"CommonName"`
	SourceIp                 string           `position:"Query" name:"SourceIp"`
	CertType                 string           `position:"Query" name:"CertType"`
	State                    string           `position:"Query" name:"State"`
	CsrPemString             string           `position:"Query" name:"CsrPemString"`
	AlgorithmKeySize         string           `position:"Query" name:"AlgorithmKeySize"`
	AfterTime                requests.Integer `position:"Query" name:"AfterTime"`
	Sans                     string           `position:"Query" name:"Sans"`
	Locality                 string           `position:"Query" name:"Locality"`
	BasicConstraintsCritical requests.Boolean `position:"Query" name:"BasicConstraintsCritical"`
	AliasName                string           `position:"Query" name:"AliasName"`
	Organization             string           `position:"Query" name:"Organization"`
	BeforeTime               requests.Integer `position:"Query" name:"BeforeTime"`
	ParentIdentifier         string           `position:"Query" name:"ParentIdentifier"`
	OrganizationUnit         string           `position:"Query" name:"OrganizationUnit"`
}

// CreateWHCertificateWithExtensionResponse is the response struct for api CreateWHCertificateWithExtension
type CreateWHCertificateWithExtensionResponse struct {
	*responses.BaseResponse
	Identifier       string `json:"Identifier" xml:"Identifier"`
	RequestId        string `json:"RequestId" xml:"RequestId"`
	Certificate      string `json:"Certificate" xml:"Certificate"`
	CertificateChain string `json:"CertificateChain" xml:"CertificateChain"`
}

// CreateCreateWHCertificateWithExtensionRequest creates a request to invoke CreateWHCertificateWithExtension API
func CreateCreateWHCertificateWithExtensionRequest() (request *CreateWHCertificateWithExtensionRequest) {
	request = &CreateWHCertificateWithExtensionRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cas", "2020-04-07", "CreateWHCertificateWithExtension", "", "")
	request.Method = requests.POST
	return
}

// CreateCreateWHCertificateWithExtensionResponse creates a response to parse from CreateWHCertificateWithExtension response
func CreateCreateWHCertificateWithExtensionResponse() (response *CreateWHCertificateWithExtensionResponse) {
	response = &CreateWHCertificateWithExtensionResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
