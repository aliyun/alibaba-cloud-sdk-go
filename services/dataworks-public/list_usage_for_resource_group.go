package dataworks_public

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListUsageForResourceGroup invokes the dataworks_public.ListUsageForResourceGroup API synchronously
func (client *Client) ListUsageForResourceGroup(request *ListUsageForResourceGroupRequest) (response *ListUsageForResourceGroupResponse, err error) {
	response = CreateListUsageForResourceGroupResponse()
	err = client.DoAction(request, response)
	return
}

// ListUsageForResourceGroupWithChan invokes the dataworks_public.ListUsageForResourceGroup API asynchronously
func (client *Client) ListUsageForResourceGroupWithChan(request *ListUsageForResourceGroupRequest) (<-chan *ListUsageForResourceGroupResponse, <-chan error) {
	responseChan := make(chan *ListUsageForResourceGroupResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListUsageForResourceGroup(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListUsageForResourceGroupWithCallback invokes the dataworks_public.ListUsageForResourceGroup API asynchronously
func (client *Client) ListUsageForResourceGroupWithCallback(request *ListUsageForResourceGroupRequest, callback func(response *ListUsageForResourceGroupResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListUsageForResourceGroupResponse
		var err error
		defer close(result)
		response, err = client.ListUsageForResourceGroup(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListUsageForResourceGroupRequest is the request struct for api ListUsageForResourceGroup
type ListUsageForResourceGroupRequest struct {
	*requests.RpcRequest
	ProjectEnv              string           `position:"Body" name:"ProjectEnv"`
	EndTime                 requests.Integer `position:"Body" name:"EndTime"`
	ResourceGroupIdentifier string           `position:"Body" name:"ResourceGroupIdentifier"`
	StartTime               requests.Integer `position:"Body" name:"StartTime"`
}

// ListUsageForResourceGroupResponse is the response struct for api ListUsageForResourceGroup
type ListUsageForResourceGroupResponse struct {
	*responses.BaseResponse
	HttpStatusCode int                           `json:"HttpStatusCode" xml:"HttpStatusCode"`
	RequestId      string                        `json:"RequestId" xml:"RequestId"`
	ErrorMessage   string                        `json:"ErrorMessage" xml:"ErrorMessage"`
	ErrorCode      string                        `json:"ErrorCode" xml:"ErrorCode"`
	Success        bool                          `json:"Success" xml:"Success"`
	Data           []PopUsageForResourceGroupDto `json:"Data" xml:"Data"`
}

// CreateListUsageForResourceGroupRequest creates a request to invoke ListUsageForResourceGroup API
func CreateListUsageForResourceGroupRequest() (request *ListUsageForResourceGroupRequest) {
	request = &ListUsageForResourceGroupRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("dataworks-public", "2020-05-18", "ListUsageForResourceGroup", "", "")
	request.Method = requests.POST
	return
}

// CreateListUsageForResourceGroupResponse creates a response to parse from ListUsageForResourceGroup response
func CreateListUsageForResourceGroupResponse() (response *ListUsageForResourceGroupResponse) {
	response = &ListUsageForResourceGroupResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
