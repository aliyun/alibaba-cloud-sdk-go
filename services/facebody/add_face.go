package facebody

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// AddFace invokes the facebody.AddFace API synchronously
func (client *Client) AddFace(request *AddFaceRequest) (response *AddFaceResponse, err error) {
	response = CreateAddFaceResponse()
	err = client.DoAction(request, response)
	return
}

// AddFaceWithChan invokes the facebody.AddFace API asynchronously
func (client *Client) AddFaceWithChan(request *AddFaceRequest) (<-chan *AddFaceResponse, <-chan error) {
	responseChan := make(chan *AddFaceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.AddFace(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// AddFaceWithCallback invokes the facebody.AddFace API asynchronously
func (client *Client) AddFaceWithCallback(request *AddFaceRequest, callback func(response *AddFaceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *AddFaceResponse
		var err error
		defer close(result)
		response, err = client.AddFace(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// AddFaceRequest is the request struct for api AddFace
type AddFaceRequest struct {
	*requests.RpcRequest
	EntityId                              string           `position:"Body" name:"EntityId"`
	FormatResultToJson                    requests.Boolean `position:"Query" name:"FormatResultToJson"`
	QualityScoreThreshold                 requests.Float   `position:"Body" name:"QualityScoreThreshold"`
	SimilarityScoreThresholdBetweenEntity requests.Float   `position:"Body" name:"SimilarityScoreThresholdBetweenEntity"`
	ExtraData                             string           `position:"Body" name:"ExtraData"`
	OssFile                               string           `position:"Query" name:"OssFile"`
	SimilarityScoreThresholdInEntity      requests.Float   `position:"Body" name:"SimilarityScoreThresholdInEntity"`
	RequestProxyBy                        string           `position:"Query" name:"RequestProxyBy"`
	DbName                                string           `position:"Body" name:"DbName"`
	ImageUrl                              string           `position:"Body" name:"ImageUrl"`
}

// AddFaceResponse is the response struct for api AddFace
type AddFaceResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Code      string `json:"Code" xml:"Code"`
	Message   string `json:"Message" xml:"Message"`
	Data      Data   `json:"Data" xml:"Data"`
}

// CreateAddFaceRequest creates a request to invoke AddFace API
func CreateAddFaceRequest() (request *AddFaceRequest) {
	request = &AddFaceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("facebody", "2019-12-30", "AddFace", "facebody", "openAPI")
	request.Method = requests.POST
	return
}

// CreateAddFaceResponse creates a response to parse from AddFace response
func CreateAddFaceResponse() (response *AddFaceResponse) {
	response = &AddFaceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
