package dts

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// PreviewSql invokes the dts.PreviewSql API synchronously
func (client *Client) PreviewSql(request *PreviewSqlRequest) (response *PreviewSqlResponse, err error) {
	response = CreatePreviewSqlResponse()
	err = client.DoAction(request, response)
	return
}

// PreviewSqlWithChan invokes the dts.PreviewSql API asynchronously
func (client *Client) PreviewSqlWithChan(request *PreviewSqlRequest) (<-chan *PreviewSqlResponse, <-chan error) {
	responseChan := make(chan *PreviewSqlResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PreviewSql(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// PreviewSqlWithCallback invokes the dts.PreviewSql API asynchronously
func (client *Client) PreviewSqlWithCallback(request *PreviewSqlRequest, callback func(response *PreviewSqlResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PreviewSqlResponse
		var err error
		defer close(result)
		response, err = client.PreviewSql(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// PreviewSqlRequest is the request struct for api PreviewSql
type PreviewSqlRequest struct {
	*requests.RpcRequest
	EtlCalculator string `position:"Body" name:"EtlCalculator"`
}

// PreviewSqlResponse is the response struct for api PreviewSql
type PreviewSqlResponse struct {
	*responses.BaseResponse
	HttpStatusCode      int      `json:"HttpStatusCode" xml:"HttpStatusCode"`
	ValidationException string   `json:"ValidationException" xml:"ValidationException"`
	RequestId           string   `json:"RequestId" xml:"RequestId"`
	ErrCode             string   `json:"ErrCode" xml:"ErrCode"`
	Success             bool     `json:"Success" xml:"Success"`
	ErrMessage          string   `json:"ErrMessage" xml:"ErrMessage"`
	DynamicMessage      string   `json:"DynamicMessage" xml:"DynamicMessage"`
	StreamGraph         string   `json:"StreamGraph" xml:"StreamGraph"`
	DynamicCode         string   `json:"DynamicCode" xml:"DynamicCode"`
	SqlList             []string `json:"SqlList" xml:"SqlList"`
}

// CreatePreviewSqlRequest creates a request to invoke PreviewSql API
func CreatePreviewSqlRequest() (request *PreviewSqlRequest) {
	request = &PreviewSqlRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Dts", "2020-01-01", "PreviewSql", "dts", "openAPI")
	request.Method = requests.POST
	return
}

// CreatePreviewSqlResponse creates a response to parse from PreviewSql response
func CreatePreviewSqlResponse() (response *PreviewSqlResponse) {
	response = &PreviewSqlResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
