package cms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeHybridMonitorSLSGroup invokes the cms.DescribeHybridMonitorSLSGroup API synchronously
func (client *Client) DescribeHybridMonitorSLSGroup(request *DescribeHybridMonitorSLSGroupRequest) (response *DescribeHybridMonitorSLSGroupResponse, err error) {
	response = CreateDescribeHybridMonitorSLSGroupResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeHybridMonitorSLSGroupWithChan invokes the cms.DescribeHybridMonitorSLSGroup API asynchronously
func (client *Client) DescribeHybridMonitorSLSGroupWithChan(request *DescribeHybridMonitorSLSGroupRequest) (<-chan *DescribeHybridMonitorSLSGroupResponse, <-chan error) {
	responseChan := make(chan *DescribeHybridMonitorSLSGroupResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeHybridMonitorSLSGroup(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeHybridMonitorSLSGroupWithCallback invokes the cms.DescribeHybridMonitorSLSGroup API asynchronously
func (client *Client) DescribeHybridMonitorSLSGroupWithCallback(request *DescribeHybridMonitorSLSGroupRequest, callback func(response *DescribeHybridMonitorSLSGroupResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeHybridMonitorSLSGroupResponse
		var err error
		defer close(result)
		response, err = client.DescribeHybridMonitorSLSGroup(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeHybridMonitorSLSGroupRequest is the request struct for api DescribeHybridMonitorSLSGroup
type DescribeHybridMonitorSLSGroupRequest struct {
	*requests.RpcRequest
	PageNumber   string `position:"Query" name:"PageNumber"`
	PageSize     string `position:"Query" name:"PageSize"`
	Keyword      string `position:"Query" name:"Keyword"`
	SLSGroupName string `position:"Query" name:"SLSGroupName"`
}

// DescribeHybridMonitorSLSGroupResponse is the response struct for api DescribeHybridMonitorSLSGroup
type DescribeHybridMonitorSLSGroupResponse struct {
	*responses.BaseResponse
	Code       string                                `json:"Code" xml:"Code"`
	Message    string                                `json:"Message" xml:"Message"`
	RequestId  string                                `json:"RequestId" xml:"RequestId"`
	Success    string                                `json:"Success" xml:"Success"`
	PageSize   int64                                 `json:"PageSize" xml:"PageSize"`
	PageNumber int64                                 `json:"PageNumber" xml:"PageNumber"`
	Total      int64                                 `json:"Total" xml:"Total"`
	List       []DataInDescribeHybridMonitorSLSGroup `json:"List" xml:"List"`
}

// CreateDescribeHybridMonitorSLSGroupRequest creates a request to invoke DescribeHybridMonitorSLSGroup API
func CreateDescribeHybridMonitorSLSGroupRequest() (request *DescribeHybridMonitorSLSGroupRequest) {
	request = &DescribeHybridMonitorSLSGroupRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cms", "2019-01-01", "DescribeHybridMonitorSLSGroup", "cms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeHybridMonitorSLSGroupResponse creates a response to parse from DescribeHybridMonitorSLSGroup response
func CreateDescribeHybridMonitorSLSGroupResponse() (response *DescribeHybridMonitorSLSGroupResponse) {
	response = &DescribeHybridMonitorSLSGroupResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
