//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package rtc

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeRealTimeRecordList invokes the rtc.DescribeRealTimeRecordList API synchronously
// api document: https://help.aliyun.com/api/rtc/describerealtimerecordlist.html
func (client *Client) DescribeRealTimeRecordList(request *DescribeRealTimeRecordListRequest) (response *DescribeRealTimeRecordListResponse, err error) {
	response = CreateDescribeRealTimeRecordListResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeRealTimeRecordListWithChan invokes the rtc.DescribeRealTimeRecordList API asynchronously
// api document: https://help.aliyun.com/api/rtc/describerealtimerecordlist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeRealTimeRecordListWithChan(request *DescribeRealTimeRecordListRequest) (<-chan *DescribeRealTimeRecordListResponse, <-chan error) {
	responseChan := make(chan *DescribeRealTimeRecordListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeRealTimeRecordList(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeRealTimeRecordListWithCallback invokes the rtc.DescribeRealTimeRecordList API asynchronously
// api document: https://help.aliyun.com/api/rtc/describerealtimerecordlist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeRealTimeRecordListWithCallback(request *DescribeRealTimeRecordListRequest, callback func(response *DescribeRealTimeRecordListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeRealTimeRecordListResponse
		var err error
		defer close(result)
		response, err = client.DescribeRealTimeRecordList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeRealTimeRecordListRequest is the request struct for api DescribeRealTimeRecordList
type DescribeRealTimeRecordListRequest struct {
	*requests.RpcRequest
	OwnerId   requests.Integer `position:"Query" name:"OwnerId"`
	StartTime string           `position:"Query" name:"StartTime"`
	EndTime   string           `position:"Query" name:"EndTime"`
}

// DescribeRealTimeRecordListResponse is the response struct for api DescribeRealTimeRecordList
type DescribeRealTimeRecordListResponse struct {
	*responses.BaseResponse
	RequestId                string                                              `json:"RequestId" xml:"RequestId"`
	CommunicationRecordInfos DescribeRealTimeRecordListCommunicationRecordInfos0 `json:"CommunicationRecordInfos" xml:"CommunicationRecordInfos"`
}

type DescribeRealTimeRecordListCommunicationRecordInfos0 struct {
	CommunicationRecordInfo []DescribeRealTimeRecordListCommunicationRecordInfo1 `json:"CommunicationRecordInfo" xml:"CommunicationRecordInfo"`
}

type DescribeRealTimeRecordListCommunicationRecordInfo1 struct {
	ChannelId     string   `json:"ChannelId" xml:"ChannelId"`
	StartTime     string   `json:"StartTime" xml:"StartTime"`
	EndTime       string   `json:"EndTime" xml:"EndTime"`
	OnlineUserCnt int64    `json:"OnlineUserCnt" xml:"OnlineUserCnt"`
	Status        bool     `json:"Status" xml:"Status"`
	RecordId      string   `json:"RecordId" xml:"RecordId"`
	CallAreas     []string `json:"CallAreas" xml:"CallAreas"`
}

// CreateDescribeRealTimeRecordListRequest creates a request to invoke DescribeRealTimeRecordList API
func CreateDescribeRealTimeRecordListRequest() (request *DescribeRealTimeRecordListRequest) {
	request = &DescribeRealTimeRecordListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("rtc", "2018-01-11", "DescribeRealTimeRecordList", "rtc", "openAPI")
	return
}

// CreateDescribeRealTimeRecordListResponse creates a response to parse from DescribeRealTimeRecordList response
func CreateDescribeRealTimeRecordListResponse() (response *DescribeRealTimeRecordListResponse) {
	response = &DescribeRealTimeRecordListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
