package arms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetAlertRules invokes the arms.GetAlertRules API synchronously
func (client *Client) GetAlertRules(request *GetAlertRulesRequest) (response *GetAlertRulesResponse, err error) {
	response = CreateGetAlertRulesResponse()
	err = client.DoAction(request, response)
	return
}

// GetAlertRulesWithChan invokes the arms.GetAlertRules API asynchronously
func (client *Client) GetAlertRulesWithChan(request *GetAlertRulesRequest) (<-chan *GetAlertRulesResponse, <-chan error) {
	responseChan := make(chan *GetAlertRulesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetAlertRules(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetAlertRulesWithCallback invokes the arms.GetAlertRules API asynchronously
func (client *Client) GetAlertRulesWithCallback(request *GetAlertRulesRequest, callback func(response *GetAlertRulesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetAlertRulesResponse
		var err error
		defer close(result)
		response, err = client.GetAlertRules(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetAlertRulesRequest is the request struct for api GetAlertRules
type GetAlertRulesRequest struct {
	*requests.RpcRequest
	ProductCode string           `position:"Query" name:"ProductCode"`
	AlertStatus string           `position:"Query" name:"AlertStatus"`
	ClusterId   string           `position:"Query" name:"ClusterId"`
	AlertNames  string           `position:"Query" name:"AlertNames"`
	AlertType   string           `position:"Query" name:"AlertType"`
	Size        requests.Integer `position:"Query" name:"Size"`
	AlertIds    string           `position:"Query" name:"AlertIds"`
	Page        requests.Integer `position:"Query" name:"Page"`
}

// GetAlertRulesResponse is the response struct for api GetAlertRules
type GetAlertRulesResponse struct {
	*responses.BaseResponse
	RequestId string   `json:"RequestId" xml:"RequestId"`
	PageBean  PageBean `json:"PageBean" xml:"PageBean"`
}

// CreateGetAlertRulesRequest creates a request to invoke GetAlertRules API
func CreateGetAlertRulesRequest() (request *GetAlertRulesRequest) {
	request = &GetAlertRulesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ARMS", "2019-08-08", "GetAlertRules", "arms", "openAPI")
	request.Method = requests.POST
	return
}

// CreateGetAlertRulesResponse creates a response to parse from GetAlertRules response
func CreateGetAlertRulesResponse() (response *GetAlertRulesResponse) {
	response = &GetAlertRulesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
