package imageseg

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SegmentAnimal invokes the imageseg.SegmentAnimal API synchronously
func (client *Client) SegmentAnimal(request *SegmentAnimalRequest) (response *SegmentAnimalResponse, err error) {
	response = CreateSegmentAnimalResponse()
	err = client.DoAction(request, response)
	return
}

// SegmentAnimalWithChan invokes the imageseg.SegmentAnimal API asynchronously
func (client *Client) SegmentAnimalWithChan(request *SegmentAnimalRequest) (<-chan *SegmentAnimalResponse, <-chan error) {
	responseChan := make(chan *SegmentAnimalResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SegmentAnimal(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SegmentAnimalWithCallback invokes the imageseg.SegmentAnimal API asynchronously
func (client *Client) SegmentAnimalWithCallback(request *SegmentAnimalRequest, callback func(response *SegmentAnimalResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SegmentAnimalResponse
		var err error
		defer close(result)
		response, err = client.SegmentAnimal(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SegmentAnimalRequest is the request struct for api SegmentAnimal
type SegmentAnimalRequest struct {
	*requests.RpcRequest
	ReturnForm     string `position:"Query" name:"ReturnForm"`
	OssFile        string `position:"Query" name:"OssFile"`
	RequestProxyBy string `position:"Query" name:"RequestProxyBy"`
	ImageURL       string `position:"Query" name:"ImageURL"`
}

// SegmentAnimalResponse is the response struct for api SegmentAnimal
type SegmentAnimalResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Data      Data   `json:"Data" xml:"Data"`
}

// CreateSegmentAnimalRequest creates a request to invoke SegmentAnimal API
func CreateSegmentAnimalRequest() (request *SegmentAnimalRequest) {
	request = &SegmentAnimalRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("imageseg", "2019-12-30", "SegmentAnimal", "", "")
	request.Method = requests.POST
	return
}

// CreateSegmentAnimalResponse creates a response to parse from SegmentAnimal response
func CreateSegmentAnimalResponse() (response *SegmentAnimalResponse) {
	response = &SegmentAnimalResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
