package ros20190910

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// PreviewStack invokes the ros20190910.PreviewStack API synchronously
// api document: https://help.aliyun.com/api/ros20190910/previewstack.html
func (client *Client) PreviewStack(request *PreviewStackRequest) (response *PreviewStackResponse, err error) {
	response = CreatePreviewStackResponse()
	err = client.DoAction(request, response)
	return
}

// PreviewStackWithChan invokes the ros20190910.PreviewStack API asynchronously
// api document: https://help.aliyun.com/api/ros20190910/previewstack.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PreviewStackWithChan(request *PreviewStackRequest) (<-chan *PreviewStackResponse, <-chan error) {
	responseChan := make(chan *PreviewStackResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.PreviewStack(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// PreviewStackWithCallback invokes the ros20190910.PreviewStack API asynchronously
// api document: https://help.aliyun.com/api/ros20190910/previewstack.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) PreviewStackWithCallback(request *PreviewStackRequest, callback func(response *PreviewStackResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *PreviewStackResponse
		var err error
		defer close(result)
		response, err = client.PreviewStack(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// PreviewStackRequest is the request struct for api PreviewStack
type PreviewStackRequest struct {
	*requests.RpcRequest
	ClientToken      string                    `position:"Query" name:"ClientToken"`
	TemplateBody     string                    `position:"Query" name:"TemplateBody"`
	TimeoutInMinutes requests.Integer          `position:"Query" name:"TimeoutInMinutes"`
	TemplateURL      string                    `position:"Query" name:"TemplateURL"`
	StackName        string                    `position:"Query" name:"StackName"`
	StackPolicyBody  string                    `position:"Query" name:"StackPolicyBody"`
	DisableRollback  requests.Boolean          `position:"Query" name:"DisableRollback"`
	StackPolicyURL   string                    `position:"Query" name:"StackPolicyURL"`
	Parameters       *[]PreviewStackParameters `position:"Query" name:"Parameters"  type:"Repeated"`
}

// PreviewStackParameters is a repeated param struct in PreviewStackRequest
type PreviewStackParameters struct {
	ParameterValue string `name:"ParameterValue"`
	ParameterKey   string `name:"ParameterKey"`
}

// PreviewStackResponse is the response struct for api PreviewStack
type PreviewStackResponse struct {
	*responses.BaseResponse
	RequestId string                 `json:"RequestId" xml:"RequestId"`
	Stack     map[string]interface{} `json:"Stack" xml:"Stack"`
}

// CreatePreviewStackRequest creates a request to invoke PreviewStack API
func CreatePreviewStackRequest() (request *PreviewStackRequest) {
	request = &PreviewStackRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ros20190910", "2019-09-10", "PreviewStack", "ros20190910", "openAPI")
	return
}

// CreatePreviewStackResponse creates a response to parse from PreviewStack response
func CreatePreviewStackResponse() (response *PreviewStackResponse) {
	response = &PreviewStackResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
