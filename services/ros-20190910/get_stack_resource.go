package ros20190910

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetStackResource invokes the ros20190910.GetStackResource API synchronously
// api document: https://help.aliyun.com/api/ros20190910/getstackresource.html
func (client *Client) GetStackResource(request *GetStackResourceRequest) (response *GetStackResourceResponse, err error) {
	response = CreateGetStackResourceResponse()
	err = client.DoAction(request, response)
	return
}

// GetStackResourceWithChan invokes the ros20190910.GetStackResource API asynchronously
// api document: https://help.aliyun.com/api/ros20190910/getstackresource.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetStackResourceWithChan(request *GetStackResourceRequest) (<-chan *GetStackResourceResponse, <-chan error) {
	responseChan := make(chan *GetStackResourceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetStackResource(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetStackResourceWithCallback invokes the ros20190910.GetStackResource API asynchronously
// api document: https://help.aliyun.com/api/ros20190910/getstackresource.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetStackResourceWithCallback(request *GetStackResourceRequest, callback func(response *GetStackResourceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetStackResourceResponse
		var err error
		defer close(result)
		response, err = client.GetStackResource(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetStackResourceRequest is the request struct for api GetStackResource
type GetStackResourceRequest struct {
	*requests.RpcRequest
	ClientToken            string           `position:"Query" name:"ClientToken"`
	StackId                string           `position:"Query" name:"StackId"`
	LogicalResourceId      string           `position:"Query" name:"LogicalResourceId"`
	ShowResourceAttributes requests.Boolean `position:"Query" name:"ShowResourceAttributes"`
}

// GetStackResourceResponse is the response struct for api GetStackResource
type GetStackResourceResponse struct {
	*responses.BaseResponse
	CreateTime         string                 `json:"CreateTime" xml:"CreateTime"`
	Description        string                 `json:"Description" xml:"Description"`
	LogicalResourceId  string                 `json:"LogicalResourceId" xml:"LogicalResourceId"`
	Metadata           map[string]interface{} `json:"Metadata" xml:"Metadata"`
	PhysicalResourceId string                 `json:"PhysicalResourceId" xml:"PhysicalResourceId"`
	RequestId          string                 `json:"RequestId" xml:"RequestId"`
	ResourceType       string                 `json:"ResourceType" xml:"ResourceType"`
	StackId            string                 `json:"StackId" xml:"StackId"`
	StackName          string                 `json:"StackName" xml:"StackName"`
	Status             string                 `json:"Status" xml:"Status"`
	StatusReason       string                 `json:"StatusReason" xml:"StatusReason"`
	UpdateTime         string                 `json:"UpdateTime" xml:"UpdateTime"`
	ResourceAttributes []string               `json:"ResourceAttributes" xml:"ResourceAttributes"`
}

// CreateGetStackResourceRequest creates a request to invoke GetStackResource API
func CreateGetStackResourceRequest() (request *GetStackResourceRequest) {
	request = &GetStackResourceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("ros20190910", "2019-09-10", "GetStackResource", "ros20190910", "openAPI")
	return
}

// CreateGetStackResourceResponse creates a response to parse from GetStackResource response
func CreateGetStackResourceResponse() (response *GetStackResourceResponse) {
	response = &GetStackResourceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
