package polardb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeSqlLogDetailArchiveStatus invokes the polardb.DescribeSqlLogDetailArchiveStatus API synchronously
func (client *Client) DescribeSqlLogDetailArchiveStatus(request *DescribeSqlLogDetailArchiveStatusRequest) (response *DescribeSqlLogDetailArchiveStatusResponse, err error) {
	response = CreateDescribeSqlLogDetailArchiveStatusResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeSqlLogDetailArchiveStatusWithChan invokes the polardb.DescribeSqlLogDetailArchiveStatus API asynchronously
func (client *Client) DescribeSqlLogDetailArchiveStatusWithChan(request *DescribeSqlLogDetailArchiveStatusRequest) (<-chan *DescribeSqlLogDetailArchiveStatusResponse, <-chan error) {
	responseChan := make(chan *DescribeSqlLogDetailArchiveStatusResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeSqlLogDetailArchiveStatus(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeSqlLogDetailArchiveStatusWithCallback invokes the polardb.DescribeSqlLogDetailArchiveStatus API asynchronously
func (client *Client) DescribeSqlLogDetailArchiveStatusWithCallback(request *DescribeSqlLogDetailArchiveStatusRequest, callback func(response *DescribeSqlLogDetailArchiveStatusResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeSqlLogDetailArchiveStatusResponse
		var err error
		defer close(result)
		response, err = client.DescribeSqlLogDetailArchiveStatus(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeSqlLogDetailArchiveStatusRequest is the request struct for api DescribeSqlLogDetailArchiveStatus
type DescribeSqlLogDetailArchiveStatusRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	SecurityToken        string           `position:"Query" name:"SecurityToken"`
	DBInstanceId         string           `position:"Query" name:"DBInstanceId"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeSqlLogDetailArchiveStatusResponse is the response struct for api DescribeSqlLogDetailArchiveStatus
type DescribeSqlLogDetailArchiveStatusResponse struct {
	*responses.BaseResponse
	ItemsNumbers   int                                      `json:"ItemsNumbers" xml:"ItemsNumbers"`
	RequestId      string                                   `json:"RequestId" xml:"RequestId"`
	DBInstanceID   int                                      `json:"DBInstanceID" xml:"DBInstanceID"`
	DBInstanceName string                                   `json:"DBInstanceName" xml:"DBInstanceName"`
	Items          ItemsInDescribeSqlLogDetailArchiveStatus `json:"Items" xml:"Items"`
}

// CreateDescribeSqlLogDetailArchiveStatusRequest creates a request to invoke DescribeSqlLogDetailArchiveStatus API
func CreateDescribeSqlLogDetailArchiveStatusRequest() (request *DescribeSqlLogDetailArchiveStatusRequest) {
	request = &DescribeSqlLogDetailArchiveStatusRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("polardb", "2017-08-01", "DescribeSqlLogDetailArchiveStatus", "polardb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeSqlLogDetailArchiveStatusResponse creates a response to parse from DescribeSqlLogDetailArchiveStatus response
func CreateDescribeSqlLogDetailArchiveStatusResponse() (response *DescribeSqlLogDetailArchiveStatusResponse) {
	response = &DescribeSqlLogDetailArchiveStatusResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
