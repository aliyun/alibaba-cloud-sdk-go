package polardb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDBClusterUsage invokes the polardb.DescribeDBClusterUsage API synchronously
func (client *Client) DescribeDBClusterUsage(request *DescribeDBClusterUsageRequest) (response *DescribeDBClusterUsageResponse, err error) {
	response = CreateDescribeDBClusterUsageResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDBClusterUsageWithChan invokes the polardb.DescribeDBClusterUsage API asynchronously
func (client *Client) DescribeDBClusterUsageWithChan(request *DescribeDBClusterUsageRequest) (<-chan *DescribeDBClusterUsageResponse, <-chan error) {
	responseChan := make(chan *DescribeDBClusterUsageResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDBClusterUsage(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDBClusterUsageWithCallback invokes the polardb.DescribeDBClusterUsage API asynchronously
func (client *Client) DescribeDBClusterUsageWithCallback(request *DescribeDBClusterUsageRequest, callback func(response *DescribeDBClusterUsageResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDBClusterUsageResponse
		var err error
		defer close(result)
		response, err = client.DescribeDBClusterUsage(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDBClusterUsageRequest is the request struct for api DescribeDBClusterUsage
type DescribeDBClusterUsageRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	DBClusterId          string           `position:"Query" name:"DBClusterId"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeDBClusterUsageResponse is the response struct for api DescribeDBClusterUsage
type DescribeDBClusterUsageResponse struct {
	*responses.BaseResponse
	DataLevel1BackupChainSize int64 `json:"DataLevel1BackupChainSize" xml:"DataLevel1BackupChainSize"`
	StorageUsed               int64 `json:"StorageUsed" xml:"StorageUsed"`
	SQLSize                   int64 `json:"SQLSize" xml:"SQLSize"`
	InodeTotal                int64 `json:"InodeTotal" xml:"InodeTotal"`
	InodeUsed                 int64 `json:"InodeUsed" xml:"InodeUsed"`
	BlktagTotal               int64 `json:"BlktagTotal" xml:"BlktagTotal"`
	BlktagUsed                int64 `json:"BlktagUsed" xml:"BlktagUsed"`
	RequestId                 int64 `json:"RequestId" xml:"RequestId"`
}

// CreateDescribeDBClusterUsageRequest creates a request to invoke DescribeDBClusterUsage API
func CreateDescribeDBClusterUsageRequest() (request *DescribeDBClusterUsageRequest) {
	request = &DescribeDBClusterUsageRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("polardb", "2017-08-01", "DescribeDBClusterUsage", "polardb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeDBClusterUsageResponse creates a response to parse from DescribeDBClusterUsage response
func CreateDescribeDBClusterUsageResponse() (response *DescribeDBClusterUsageResponse) {
	response = &DescribeDBClusterUsageResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
