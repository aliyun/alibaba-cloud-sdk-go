package polardb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeSqlLogDumpStatus invokes the polardb.DescribeSqlLogDumpStatus API synchronously
func (client *Client) DescribeSqlLogDumpStatus(request *DescribeSqlLogDumpStatusRequest) (response *DescribeSqlLogDumpStatusResponse, err error) {
	response = CreateDescribeSqlLogDumpStatusResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeSqlLogDumpStatusWithChan invokes the polardb.DescribeSqlLogDumpStatus API asynchronously
func (client *Client) DescribeSqlLogDumpStatusWithChan(request *DescribeSqlLogDumpStatusRequest) (<-chan *DescribeSqlLogDumpStatusResponse, <-chan error) {
	responseChan := make(chan *DescribeSqlLogDumpStatusResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeSqlLogDumpStatus(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeSqlLogDumpStatusWithCallback invokes the polardb.DescribeSqlLogDumpStatus API asynchronously
func (client *Client) DescribeSqlLogDumpStatusWithCallback(request *DescribeSqlLogDumpStatusRequest, callback func(response *DescribeSqlLogDumpStatusResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeSqlLogDumpStatusResponse
		var err error
		defer close(result)
		response, err = client.DescribeSqlLogDumpStatus(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeSqlLogDumpStatusRequest is the request struct for api DescribeSqlLogDumpStatus
type DescribeSqlLogDumpStatusRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	SecurityToken        string           `position:"Query" name:"SecurityToken"`
	DBInstanceId         string           `position:"Query" name:"DBInstanceId"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeSqlLogDumpStatusResponse is the response struct for api DescribeSqlLogDumpStatus
type DescribeSqlLogDumpStatusResponse struct {
	*responses.BaseResponse
	RequestId          string                          `json:"RequestId" xml:"RequestId"`
	Endpoint           string                          `json:"Endpoint" xml:"Endpoint"`
	DBInstanceID       int                             `json:"DBInstanceID" xml:"DBInstanceID"`
	IsEnableSqlLogDump string                          `json:"IsEnableSqlLogDump" xml:"IsEnableSqlLogDump"`
	Bucket             string                          `json:"Bucket" xml:"Bucket"`
	DBInstanceName     string                          `json:"DBInstanceName" xml:"DBInstanceName"`
	Items              ItemsInDescribeSqlLogDumpStatus `json:"Items" xml:"Items"`
}

// CreateDescribeSqlLogDumpStatusRequest creates a request to invoke DescribeSqlLogDumpStatus API
func CreateDescribeSqlLogDumpStatusRequest() (request *DescribeSqlLogDumpStatusRequest) {
	request = &DescribeSqlLogDumpStatusRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("polardb", "2017-08-01", "DescribeSqlLogDumpStatus", "polardb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeSqlLogDumpStatusResponse creates a response to parse from DescribeSqlLogDumpStatus response
func CreateDescribeSqlLogDumpStatusResponse() (response *DescribeSqlLogDumpStatusResponse) {
	response = &DescribeSqlLogDumpStatusResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
