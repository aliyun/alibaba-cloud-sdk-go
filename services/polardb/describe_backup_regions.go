package polardb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeBackupRegions invokes the polardb.DescribeBackupRegions API synchronously
func (client *Client) DescribeBackupRegions(request *DescribeBackupRegionsRequest) (response *DescribeBackupRegionsResponse, err error) {
	response = CreateDescribeBackupRegionsResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeBackupRegionsWithChan invokes the polardb.DescribeBackupRegions API asynchronously
func (client *Client) DescribeBackupRegionsWithChan(request *DescribeBackupRegionsRequest) (<-chan *DescribeBackupRegionsResponse, <-chan error) {
	responseChan := make(chan *DescribeBackupRegionsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeBackupRegions(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeBackupRegionsWithCallback invokes the polardb.DescribeBackupRegions API asynchronously
func (client *Client) DescribeBackupRegionsWithCallback(request *DescribeBackupRegionsRequest, callback func(response *DescribeBackupRegionsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeBackupRegionsResponse
		var err error
		defer close(result)
		response, err = client.DescribeBackupRegions(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeBackupRegionsRequest is the request struct for api DescribeBackupRegions
type DescribeBackupRegionsRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	DBClusterId          string           `position:"Query" name:"DBClusterId"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeBackupRegionsResponse is the response struct for api DescribeBackupRegions
type DescribeBackupRegionsResponse struct {
	*responses.BaseResponse
	Regions     string `json:"Regions" xml:"Regions"`
	RequestId   string `json:"RequestId" xml:"RequestId"`
	DBClusterId string `json:"DBClusterId" xml:"DBClusterId"`
}

// CreateDescribeBackupRegionsRequest creates a request to invoke DescribeBackupRegions API
func CreateDescribeBackupRegionsRequest() (request *DescribeBackupRegionsRequest) {
	request = &DescribeBackupRegionsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("polardb", "2017-08-01", "DescribeBackupRegions", "polardb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeBackupRegionsResponse creates a response to parse from DescribeBackupRegions response
func CreateDescribeBackupRegionsResponse() (response *DescribeBackupRegionsResponse) {
	response = &DescribeBackupRegionsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
