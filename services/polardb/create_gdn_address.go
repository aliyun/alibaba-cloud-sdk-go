package polardb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateGDNAddress invokes the polardb.CreateGDNAddress API synchronously
func (client *Client) CreateGDNAddress(request *CreateGDNAddressRequest) (response *CreateGDNAddressResponse, err error) {
	response = CreateCreateGDNAddressResponse()
	err = client.DoAction(request, response)
	return
}

// CreateGDNAddressWithChan invokes the polardb.CreateGDNAddress API asynchronously
func (client *Client) CreateGDNAddressWithChan(request *CreateGDNAddressRequest) (<-chan *CreateGDNAddressResponse, <-chan error) {
	responseChan := make(chan *CreateGDNAddressResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateGDNAddress(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateGDNAddressWithCallback invokes the polardb.CreateGDNAddress API asynchronously
func (client *Client) CreateGDNAddressWithCallback(request *CreateGDNAddressRequest, callback func(response *CreateGDNAddressResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateGDNAddressResponse
		var err error
		defer close(result)
		response, err = client.CreateGDNAddress(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateGDNAddressRequest is the request struct for api CreateGDNAddress
type CreateGDNAddressRequest struct {
	*requests.RpcRequest
	ResourceOwnerId        requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ConnectionStringPrefix string           `position:"Query" name:"ConnectionStringPrefix"`
	SecurityToken          string           `position:"Query" name:"SecurityToken"`
	GDNId                  string           `position:"Query" name:"GDNId"`
	ResourceOwnerAccount   string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount           string           `position:"Query" name:"OwnerAccount"`
	OwnerId                requests.Integer `position:"Query" name:"OwnerId"`
	NetType                string           `position:"Query" name:"NetType"`
}

// CreateGDNAddressResponse is the response struct for api CreateGDNAddress
type CreateGDNAddressResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateCreateGDNAddressRequest creates a request to invoke CreateGDNAddress API
func CreateCreateGDNAddressRequest() (request *CreateGDNAddressRequest) {
	request = &CreateGDNAddressRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("polardb", "2017-08-01", "CreateGDNAddress", "polardb", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateGDNAddressResponse creates a response to parse from CreateGDNAddress response
func CreateCreateGDNAddressResponse() (response *CreateGDNAddressResponse) {
	response = &CreateGDNAddressResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
