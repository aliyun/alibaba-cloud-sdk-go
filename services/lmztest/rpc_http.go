package lmztest

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// RpcHttp invokes the lmztest.RpcHttp API synchronously
func (client *Client) RpcHttp(request *RpcHttpRequest) (response *RpcHttpResponse, err error) {
	response = CreateRpcHttpResponse()
	err = client.DoAction(request, response)
	return
}

// RpcHttpWithChan invokes the lmztest.RpcHttp API asynchronously
func (client *Client) RpcHttpWithChan(request *RpcHttpRequest) (<-chan *RpcHttpResponse, <-chan error) {
	responseChan := make(chan *RpcHttpResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.RpcHttp(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// RpcHttpWithCallback invokes the lmztest.RpcHttp API asynchronously
func (client *Client) RpcHttpWithCallback(request *RpcHttpRequest, callback func(response *RpcHttpResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *RpcHttpResponse
		var err error
		defer close(result)
		response, err = client.RpcHttp(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// RpcHttpRequest is the request struct for api RpcHttp
type RpcHttpRequest struct {
	*requests.RpcRequest
	News   string `position:"Query" name:"News"`
	Codes  string `position:"Query" name:"Codes"`
	Number string `position:"Query" name:"Number"`
	Monkey string `position:"Query" name:"Monkey"`
	World  string `position:"Query" name:"World"`
	Param  string `position:"Query" name:"Param"`
	Old    string `position:"Query" name:"Old"`
	Name   string `position:"Query" name:"Name"`
	Id     string `position:"Query" name:"Id"`
	None   string `position:"Query" name:"None"`
}

// RpcHttpResponse is the response struct for api RpcHttp
type RpcHttpResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Id        string `json:"Id" xml:"Id"`
	Name      string `json:"Name" xml:"Name"`
}

// CreateRpcHttpRequest creates a request to invoke RpcHttp API
func CreateRpcHttpRequest() (request *RpcHttpRequest) {
	request = &RpcHttpRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("LmzTest", "2010-10-11", "RpcHttp", "", "")
	request.Method = requests.POST
	return
}

// CreateRpcHttpResponse creates a response to parse from RpcHttp response
func CreateRpcHttpResponse() (response *RpcHttpResponse) {
	response = &RpcHttpResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
