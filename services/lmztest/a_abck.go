package lmztest

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// AAbck invokes the lmztest.AAbck API synchronously
func (client *Client) AAbck(request *AAbckRequest) (response *AAbckResponse, err error) {
	response = CreateAAbckResponse()
	err = client.DoAction(request, response)
	return
}

// AAbckWithChan invokes the lmztest.AAbck API asynchronously
func (client *Client) AAbckWithChan(request *AAbckRequest) (<-chan *AAbckResponse, <-chan error) {
	responseChan := make(chan *AAbckResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.AAbck(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// AAbckWithCallback invokes the lmztest.AAbck API asynchronously
func (client *Client) AAbckWithCallback(request *AAbckRequest, callback func(response *AAbckResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *AAbckResponse
		var err error
		defer close(result)
		response, err = client.AAbck(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// AAbckRequest is the request struct for api AAbck
type AAbckRequest struct {
	*requests.RpcRequest
	ClientToken3 string `position:"Query" name:"ClientToken3"`
	TestDemo     string `position:"Query" name:"TestDemo"`
}

// AAbckResponse is the response struct for api AAbck
type AAbckResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Id        string `json:"id" xml:"id"`
}

// CreateAAbckRequest creates a request to invoke AAbck API
func CreateAAbckRequest() (request *AAbckRequest) {
	request = &AAbckRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("LmzTest", "2010-10-11", "AAbck", "", "")
	request.Method = requests.GET
	return
}

// CreateAAbckResponse creates a response to parse from AAbck response
func CreateAAbckResponse() (response *AAbckResponse) {
	response = &AAbckResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
