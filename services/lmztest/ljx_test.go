package lmztest

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// LjxTest invokes the lmztest.LjxTest API synchronously
func (client *Client) LjxTest(request *LjxTestRequest) (response *LjxTestResponse, err error) {
	response = CreateLjxTestResponse()
	err = client.DoAction(request, response)
	return
}

// LjxTestWithChan invokes the lmztest.LjxTest API asynchronously
func (client *Client) LjxTestWithChan(request *LjxTestRequest) (<-chan *LjxTestResponse, <-chan error) {
	responseChan := make(chan *LjxTestResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.LjxTest(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// LjxTestWithCallback invokes the lmztest.LjxTest API asynchronously
func (client *Client) LjxTestWithCallback(request *LjxTestRequest, callback func(response *LjxTestResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *LjxTestResponse
		var err error
		defer close(result)
		response, err = client.LjxTest(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// LjxTestRequest is the request struct for api LjxTest
type LjxTestRequest struct {
	*requests.RpcRequest
	NewParam2 string            `position:"Query" name:"new-param-2"`
	NewParam1 *[]string         `position:"Query" name:"new-param-1"  type:"Json"`
	Code      map[string]string `position:"Query" name:"code"  type:"Map"`
	Id        string            `position:"Query" name:"id"`
	Body      string            `position:"Header" name:"body"`
}

// LjxTestResponse is the response struct for api LjxTest
type LjxTestResponse struct {
	*responses.BaseResponse
	Id         string   `json:"Id" xml:"Id"`
	Code       int      `json:"Code" xml:"Code"`
	Name       string   `json:"Name" xml:"Name"`
	RequestId  string   `json:"RequestId" xml:"RequestId"`
	StringList []string `json:"StringList" xml:"StringList"`
	LongList   []int64  `json:"LongList" xml:"LongList"`
	Testtest   Testtest `json:"testtest" xml:"testtest"`
	Maps       []Maps   `json:"Maps" xml:"Maps"`
}

// CreateLjxTestRequest creates a request to invoke LjxTest API
func CreateLjxTestRequest() (request *LjxTestRequest) {
	request = &LjxTestRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("LmzTest", "2010-10-11", "LjxTest", "", "")
	request.Method = requests.POST
	return
}

// CreateLjxTestResponse creates a response to parse from LjxTest response
func CreateLjxTestResponse() (response *LjxTestResponse) {
	response = &LjxTestResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
