package lmztest

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// RomeGetExecutionResult invokes the lmztest.RomeGetExecutionResult API synchronously
func (client *Client) RomeGetExecutionResult(request *RomeGetExecutionResultRequest) (response *RomeGetExecutionResultResponse, err error) {
	response = CreateRomeGetExecutionResultResponse()
	err = client.DoAction(request, response)
	return
}

// RomeGetExecutionResultWithChan invokes the lmztest.RomeGetExecutionResult API asynchronously
func (client *Client) RomeGetExecutionResultWithChan(request *RomeGetExecutionResultRequest) (<-chan *RomeGetExecutionResultResponse, <-chan error) {
	responseChan := make(chan *RomeGetExecutionResultResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.RomeGetExecutionResult(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// RomeGetExecutionResultWithCallback invokes the lmztest.RomeGetExecutionResult API asynchronously
func (client *Client) RomeGetExecutionResultWithCallback(request *RomeGetExecutionResultRequest, callback func(response *RomeGetExecutionResultResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *RomeGetExecutionResultResponse
		var err error
		defer close(result)
		response, err = client.RomeGetExecutionResult(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// RomeGetExecutionResultRequest is the request struct for api RomeGetExecutionResult
type RomeGetExecutionResultRequest struct {
	*requests.RpcRequest
	FlowRequestId string `position:"Path" name:"FlowRequestId"`
}

// RomeGetExecutionResultResponse is the response struct for api RomeGetExecutionResult
type RomeGetExecutionResultResponse struct {
	*responses.BaseResponse
}

// CreateRomeGetExecutionResultRequest creates a request to invoke RomeGetExecutionResult API
func CreateRomeGetExecutionResultRequest() (request *RomeGetExecutionResultRequest) {
	request = &RomeGetExecutionResultRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("LmzTest", "2010-10-11", "RomeGetExecutionResult", "", "")
	request.Method = requests.GET
	return
}

// CreateRomeGetExecutionResultResponse creates a response to parse from RomeGetExecutionResult response
func CreateRomeGetExecutionResultResponse() (response *RomeGetExecutionResultResponse) {
	response = &RomeGetExecutionResultResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
