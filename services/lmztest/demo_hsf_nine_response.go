package lmztest

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DemoHsfNineResponse invokes the lmztest.DemoHsfNineResponse API synchronously
func (client *Client) DemoHsfNineResponse(request *DemoHsfNineResponseRequest) (response *DemoHsfNineResponseResponse, err error) {
	response = CreateDemoHsfNineResponseResponse()
	err = client.DoAction(request, response)
	return
}

// DemoHsfNineResponseWithChan invokes the lmztest.DemoHsfNineResponse API asynchronously
func (client *Client) DemoHsfNineResponseWithChan(request *DemoHsfNineResponseRequest) (<-chan *DemoHsfNineResponseResponse, <-chan error) {
	responseChan := make(chan *DemoHsfNineResponseResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DemoHsfNineResponse(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DemoHsfNineResponseWithCallback invokes the lmztest.DemoHsfNineResponse API asynchronously
func (client *Client) DemoHsfNineResponseWithCallback(request *DemoHsfNineResponseRequest, callback func(response *DemoHsfNineResponseResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DemoHsfNineResponseResponse
		var err error
		defer close(result)
		response, err = client.DemoHsfNineResponse(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DemoHsfNineResponseRequest is the request struct for api DemoHsfNineResponse
type DemoHsfNineResponseRequest struct {
	*requests.RpcRequest
	Name    string                                `position:"Query" name:"name"`
	TestF1  string                                `position:"Query" name:"TestF1"`
	UserMap map[string]DemoHsfNineResponseUserMap `position:"Query" name:"userMap"  type:"Map"`
}

// DemoHsfNineResponseUserMap is a repeated param struct in DemoHsfNineResponseRequest
type DemoHsfNineResponseUserMap struct {
	Uaa  string `name:"Uaa"`
	Uas  string `name:"Uas"`
	Name string `name:"name"`
	Id   string `name:"id"`
}

// DemoHsfNineResponseResponse is the response struct for api DemoHsfNineResponse
type DemoHsfNineResponseResponse struct {
	*responses.BaseResponse
	Id    string                   `json:"id" xml:"id"`
	Name  string                   `json:"name" xml:"name"`
	Infos []map[string]interface{} `json:"infos" xml:"infos"`
}

// CreateDemoHsfNineResponseRequest creates a request to invoke DemoHsfNineResponse API
func CreateDemoHsfNineResponseRequest() (request *DemoHsfNineResponseRequest) {
	request = &DemoHsfNineResponseRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("LmzTest", "2010-10-11", "DemoHsfNineResponse", "", "")
	request.Method = requests.POST
	return
}

// CreateDemoHsfNineResponseResponse creates a response to parse from DemoHsfNineResponse response
func CreateDemoHsfNineResponseResponse() (response *DemoHsfNineResponseResponse) {
	response = &DemoHsfNineResponseResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
