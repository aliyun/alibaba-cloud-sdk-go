package lmztest

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DemoHttpComplexResponse invokes the lmztest.DemoHttpComplexResponse API synchronously
func (client *Client) DemoHttpComplexResponse(request *DemoHttpComplexResponseRequest) (response *DemoHttpComplexResponseResponse, err error) {
	response = CreateDemoHttpComplexResponseResponse()
	err = client.DoAction(request, response)
	return
}

// DemoHttpComplexResponseWithChan invokes the lmztest.DemoHttpComplexResponse API asynchronously
func (client *Client) DemoHttpComplexResponseWithChan(request *DemoHttpComplexResponseRequest) (<-chan *DemoHttpComplexResponseResponse, <-chan error) {
	responseChan := make(chan *DemoHttpComplexResponseResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DemoHttpComplexResponse(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DemoHttpComplexResponseWithCallback invokes the lmztest.DemoHttpComplexResponse API asynchronously
func (client *Client) DemoHttpComplexResponseWithCallback(request *DemoHttpComplexResponseRequest, callback func(response *DemoHttpComplexResponseResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DemoHttpComplexResponseResponse
		var err error
		defer close(result)
		response, err = client.DemoHttpComplexResponse(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DemoHttpComplexResponseRequest is the request struct for api DemoHttpComplexResponse
type DemoHttpComplexResponseRequest struct {
	*requests.RpcRequest
	ReqInfo string `position:"Query" name:"reqInfo"`
}

// DemoHttpComplexResponseResponse is the response struct for api DemoHttpComplexResponse
type DemoHttpComplexResponseResponse struct {
	*responses.BaseResponse
	Id    string                   `json:"id" xml:"id"`
	Name  string                   `json:"name" xml:"name"`
	Infos []map[string]interface{} `json:"infos" xml:"infos"`
}

// CreateDemoHttpComplexResponseRequest creates a request to invoke DemoHttpComplexResponse API
func CreateDemoHttpComplexResponseRequest() (request *DemoHttpComplexResponseRequest) {
	request = &DemoHttpComplexResponseRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("LmzTest", "2010-10-11", "DemoHttpComplexResponse", "", "")
	request.Method = requests.POST
	return
}

// CreateDemoHttpComplexResponseResponse creates a response to parse from DemoHttpComplexResponse response
func CreateDemoHttpComplexResponseResponse() (response *DemoHttpComplexResponseResponse) {
	response = &DemoHttpComplexResponseResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
