package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetWorkflow invokes the vod.GetWorkflow API synchronously
// api document: https://help.aliyun.com/api/vod/getworkflow.html
func (client *Client) GetWorkflow(request *GetWorkflowRequest) (response *GetWorkflowResponse, err error) {
	response = CreateGetWorkflowResponse()
	err = client.DoAction(request, response)
	return
}

// GetWorkflowWithChan invokes the vod.GetWorkflow API asynchronously
// api document: https://help.aliyun.com/api/vod/getworkflow.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetWorkflowWithChan(request *GetWorkflowRequest) (<-chan *GetWorkflowResponse, <-chan error) {
	responseChan := make(chan *GetWorkflowResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetWorkflow(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetWorkflowWithCallback invokes the vod.GetWorkflow API asynchronously
// api document: https://help.aliyun.com/api/vod/getworkflow.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetWorkflowWithCallback(request *GetWorkflowRequest, callback func(response *GetWorkflowResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetWorkflowResponse
		var err error
		defer close(result)
		response, err = client.GetWorkflow(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetWorkflowRequest is the request struct for api GetWorkflow
type GetWorkflowRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	WorkflowId           string           `position:"Query" name:"WorkflowId"`
}

// GetWorkflowResponse is the response struct for api GetWorkflow
type GetWorkflowResponse struct {
	*responses.BaseResponse
	RequestId    string       `json:"RequestId" xml:"RequestId"`
	WorkflowInfo WorkflowInfo `json:"WorkflowInfo" xml:"WorkflowInfo"`
}

// CreateGetWorkflowRequest creates a request to invoke GetWorkflow API
func CreateGetWorkflowRequest() (request *GetWorkflowRequest) {
	request = &GetWorkflowRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-03-21", "GetWorkflow", "vod", "openAPI")
	return
}

// CreateGetWorkflowResponse creates a response to parse from GetWorkflow response
func CreateGetWorkflowResponse() (response *GetWorkflowResponse) {
	response = &GetWorkflowResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
