package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeVodDomainRealTimeSrcTrafficData invokes the vod.DescribeVodDomainRealTimeSrcTrafficData API synchronously
// api document: https://help.aliyun.com/api/vod/describevoddomainrealtimesrctrafficdata.html
func (client *Client) DescribeVodDomainRealTimeSrcTrafficData(request *DescribeVodDomainRealTimeSrcTrafficDataRequest) (response *DescribeVodDomainRealTimeSrcTrafficDataResponse, err error) {
	response = CreateDescribeVodDomainRealTimeSrcTrafficDataResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeVodDomainRealTimeSrcTrafficDataWithChan invokes the vod.DescribeVodDomainRealTimeSrcTrafficData API asynchronously
// api document: https://help.aliyun.com/api/vod/describevoddomainrealtimesrctrafficdata.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeVodDomainRealTimeSrcTrafficDataWithChan(request *DescribeVodDomainRealTimeSrcTrafficDataRequest) (<-chan *DescribeVodDomainRealTimeSrcTrafficDataResponse, <-chan error) {
	responseChan := make(chan *DescribeVodDomainRealTimeSrcTrafficDataResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeVodDomainRealTimeSrcTrafficData(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeVodDomainRealTimeSrcTrafficDataWithCallback invokes the vod.DescribeVodDomainRealTimeSrcTrafficData API asynchronously
// api document: https://help.aliyun.com/api/vod/describevoddomainrealtimesrctrafficdata.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeVodDomainRealTimeSrcTrafficDataWithCallback(request *DescribeVodDomainRealTimeSrcTrafficDataRequest, callback func(response *DescribeVodDomainRealTimeSrcTrafficDataResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeVodDomainRealTimeSrcTrafficDataResponse
		var err error
		defer close(result)
		response, err = client.DescribeVodDomainRealTimeSrcTrafficData(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeVodDomainRealTimeSrcTrafficDataRequest is the request struct for api DescribeVodDomainRealTimeSrcTrafficData
type DescribeVodDomainRealTimeSrcTrafficDataRequest struct {
	*requests.RpcRequest
	StartTime  string           `position:"Query" name:"StartTime"`
	DomainName string           `position:"Query" name:"DomainName"`
	EndTime    string           `position:"Query" name:"EndTime"`
	OwnerId    requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeVodDomainRealTimeSrcTrafficDataResponse is the response struct for api DescribeVodDomainRealTimeSrcTrafficData
type DescribeVodDomainRealTimeSrcTrafficDataResponse struct {
	*responses.BaseResponse
	RequestId                         string                            `json:"RequestId" xml:"RequestId"`
	DomainName                        string                            `json:"DomainName" xml:"DomainName"`
	StartTime                         string                            `json:"StartTime" xml:"StartTime"`
	EndTime                           string                            `json:"EndTime" xml:"EndTime"`
	DataInterval                      string                            `json:"DataInterval" xml:"DataInterval"`
	RealTimeSrcTrafficDataPerInterval RealTimeSrcTrafficDataPerInterval `json:"RealTimeSrcTrafficDataPerInterval" xml:"RealTimeSrcTrafficDataPerInterval"`
}

// CreateDescribeVodDomainRealTimeSrcTrafficDataRequest creates a request to invoke DescribeVodDomainRealTimeSrcTrafficData API
func CreateDescribeVodDomainRealTimeSrcTrafficDataRequest() (request *DescribeVodDomainRealTimeSrcTrafficDataRequest) {
	request = &DescribeVodDomainRealTimeSrcTrafficDataRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-03-21", "DescribeVodDomainRealTimeSrcTrafficData", "vod", "openAPI")
	return
}

// CreateDescribeVodDomainRealTimeSrcTrafficDataResponse creates a response to parse from DescribeVodDomainRealTimeSrcTrafficData response
func CreateDescribeVodDomainRealTimeSrcTrafficDataResponse() (response *DescribeVodDomainRealTimeSrcTrafficDataResponse) {
	response = &DescribeVodDomainRealTimeSrcTrafficDataResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
