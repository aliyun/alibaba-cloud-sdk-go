package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListAppInfo invokes the vod.ListAppInfo API synchronously
func (client *Client) ListAppInfo(request *ListAppInfoRequest) (response *ListAppInfoResponse, err error) {
	response = CreateListAppInfoResponse()
	err = client.DoAction(request, response)
	return
}

// ListAppInfoWithChan invokes the vod.ListAppInfo API asynchronously
func (client *Client) ListAppInfoWithChan(request *ListAppInfoRequest) (<-chan *ListAppInfoResponse, <-chan error) {
	responseChan := make(chan *ListAppInfoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListAppInfo(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListAppInfoWithCallback invokes the vod.ListAppInfo API asynchronously
func (client *Client) ListAppInfoWithCallback(request *ListAppInfoRequest, callback func(response *ListAppInfoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListAppInfoResponse
		var err error
		defer close(result)
		response, err = client.ListAppInfo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListAppInfoRequest is the request struct for api ListAppInfo
type ListAppInfoRequest struct {
	*requests.RpcRequest
	ResourceRealOwnerId requests.Integer `position:"Query" name:"ResourceRealOwnerId"`
	PageSize            requests.Integer `position:"Query" name:"PageSize"`
	Tag                 ListAppInfoTag   `position:"Query" name:"Tag"  type:"Struct"`
	PageNo              requests.Integer `position:"Query" name:"PageNo"`
	Status              string           `position:"Query" name:"Status"`
}

// ListAppInfoTag is a repeated param struct in ListAppInfoRequest
type ListAppInfoTag struct {
	Value string `name:"Value"`
	Key   string `name:"Key"`
}

// ListAppInfoResponse is the response struct for api ListAppInfo
type ListAppInfoResponse struct {
	*responses.BaseResponse
	Total       int       `json:"Total" xml:"Total"`
	RequestId   string    `json:"RequestId" xml:"RequestId"`
	AppInfoList []AppInfo `json:"AppInfoList" xml:"AppInfoList"`
}

// CreateListAppInfoRequest creates a request to invoke ListAppInfo API
func CreateListAppInfoRequest() (request *ListAppInfoRequest) {
	request = &ListAppInfoRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-03-21", "ListAppInfo", "vod", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListAppInfoResponse creates a response to parse from ListAppInfo response
func CreateListAppInfoResponse() (response *ListAppInfoResponse) {
	response = &ListAppInfoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
