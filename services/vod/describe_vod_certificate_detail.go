package vod

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeVodCertificateDetail invokes the vod.DescribeVodCertificateDetail API synchronously
// api document: https://help.aliyun.com/api/vod/describevodcertificatedetail.html
func (client *Client) DescribeVodCertificateDetail(request *DescribeVodCertificateDetailRequest) (response *DescribeVodCertificateDetailResponse, err error) {
	response = CreateDescribeVodCertificateDetailResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeVodCertificateDetailWithChan invokes the vod.DescribeVodCertificateDetail API asynchronously
// api document: https://help.aliyun.com/api/vod/describevodcertificatedetail.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeVodCertificateDetailWithChan(request *DescribeVodCertificateDetailRequest) (<-chan *DescribeVodCertificateDetailResponse, <-chan error) {
	responseChan := make(chan *DescribeVodCertificateDetailResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeVodCertificateDetail(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeVodCertificateDetailWithCallback invokes the vod.DescribeVodCertificateDetail API asynchronously
// api document: https://help.aliyun.com/api/vod/describevodcertificatedetail.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeVodCertificateDetailWithCallback(request *DescribeVodCertificateDetailRequest, callback func(response *DescribeVodCertificateDetailResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeVodCertificateDetailResponse
		var err error
		defer close(result)
		response, err = client.DescribeVodCertificateDetail(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeVodCertificateDetailRequest is the request struct for api DescribeVodCertificateDetail
type DescribeVodCertificateDetailRequest struct {
	*requests.RpcRequest
	SecurityToken string           `position:"Query" name:"SecurityToken"`
	CertName      string           `position:"Query" name:"CertName"`
	OwnerId       requests.Integer `position:"Query" name:"OwnerId"`
}

// DescribeVodCertificateDetailResponse is the response struct for api DescribeVodCertificateDetail
type DescribeVodCertificateDetailResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Cert      string `json:"Cert" xml:"Cert"`
	Key       string `json:"Key" xml:"Key"`
	CertId    int    `json:"CertId" xml:"CertId"`
	CertName  string `json:"CertName" xml:"CertName"`
}

// CreateDescribeVodCertificateDetailRequest creates a request to invoke DescribeVodCertificateDetail API
func CreateDescribeVodCertificateDetailRequest() (request *DescribeVodCertificateDetailRequest) {
	request = &DescribeVodCertificateDetailRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("vod", "2017-03-21", "DescribeVodCertificateDetail", "vod", "openAPI")
	return
}

// CreateDescribeVodCertificateDetailResponse creates a response to parse from DescribeVodCertificateDetail response
func CreateDescribeVodCertificateDetailResponse() (response *DescribeVodCertificateDetailResponse) {
	response = &DescribeVodCertificateDetailResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
