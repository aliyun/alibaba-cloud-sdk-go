package amptest

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// HuichengTestGraySeven invokes the amptest.HuichengTestGraySeven API synchronously
func (client *Client) HuichengTestGraySeven(request *HuichengTestGraySevenRequest) (response *HuichengTestGraySevenResponse, err error) {
	response = CreateHuichengTestGraySevenResponse()
	err = client.DoAction(request, response)
	return
}

// HuichengTestGraySevenWithChan invokes the amptest.HuichengTestGraySeven API asynchronously
func (client *Client) HuichengTestGraySevenWithChan(request *HuichengTestGraySevenRequest) (<-chan *HuichengTestGraySevenResponse, <-chan error) {
	responseChan := make(chan *HuichengTestGraySevenResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.HuichengTestGraySeven(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// HuichengTestGraySevenWithCallback invokes the amptest.HuichengTestGraySeven API asynchronously
func (client *Client) HuichengTestGraySevenWithCallback(request *HuichengTestGraySevenRequest, callback func(response *HuichengTestGraySevenResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *HuichengTestGraySevenResponse
		var err error
		defer close(result)
		response, err = client.HuichengTestGraySeven(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// HuichengTestGraySevenRequest is the request struct for api HuichengTestGraySeven
type HuichengTestGraySevenRequest struct {
	*requests.RpcRequest
	Home HuichengTestGraySevenHome `position:"Query" name:"Home"  type:"Struct"`
}

// HuichengTestGraySevenHome is a repeated param struct in HuichengTestGraySevenRequest
type HuichengTestGraySevenHome struct {
	Address      HuichengTestGraySevenHomeAddress             `name:"Address" type:"Struct"`
	T            HuichengTestGraySevenHomeT                   `name:"T" type:"Struct"`
	PhoneNumbers *[]string                                    `name:"PhoneNumbers" type:"Repeated"`
	DMap         map[string]HuichengTestGraySevenHomeDMapItem `name:"DMap" type:"Map"`
	NameToAge    map[string]string                            `name:"NameToAge" type:"Map"`
	Locations    *[]HuichengTestGraySevenHomeLocationsItem    `name:"Locations" type:"Repeated"`
}

// HuichengTestGraySevenHomeAddress is a repeated param struct in HuichengTestGraySevenRequest
type HuichengTestGraySevenHomeAddress struct {
	T        HuichengTestGraySevenHomeAddressT        `name:"T" type:"Struct"`
	Location HuichengTestGraySevenHomeAddressLocation `name:"Location" type:"Struct"`
	Detail   string                                   `name:"Detail"`
}

// HuichengTestGraySevenHomeT is a repeated param struct in HuichengTestGraySevenRequest
type HuichengTestGraySevenHomeT struct {
	Class string `name:"Class"`
}

// HuichengTestGraySevenHomeDMapItem is a repeated param struct in HuichengTestGraySevenRequest
type HuichengTestGraySevenHomeDMapItem struct {
	Location HuichengTestGraySevenHomeDMapItemLocation `name:"Location" type:"Struct"`
	Detail   string                                    `name:"Detail"`
}

// HuichengTestGraySevenHomeLocationsItem is a repeated param struct in HuichengTestGraySevenRequest
type HuichengTestGraySevenHomeLocationsItem struct {
	Late string `name:"Late"`
	Lon  string `name:"Lon"`
}

// HuichengTestGraySevenHomeAddressT is a repeated param struct in HuichengTestGraySevenRequest
type HuichengTestGraySevenHomeAddressT struct {
	Class string `name:"Class"`
}

// HuichengTestGraySevenHomeAddressLocation is a repeated param struct in HuichengTestGraySevenRequest
type HuichengTestGraySevenHomeAddressLocation struct {
	Late string `name:"Late"`
	Lon  string `name:"Lon"`
}

// HuichengTestGraySevenHomeDMapItemLocation is a repeated param struct in HuichengTestGraySevenRequest
type HuichengTestGraySevenHomeDMapItemLocation struct {
	Late string `name:"Late"`
	Lon  string `name:"Lon"`
}

// HuichengTestGraySevenResponse is the response struct for api HuichengTestGraySeven
type HuichengTestGraySevenResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Size      int    `json:"Size" xml:"Size"`
	Value     string `json:"Value" xml:"Value"`
}

// CreateHuichengTestGraySevenRequest creates a request to invoke HuichengTestGraySeven API
func CreateHuichengTestGraySevenRequest() (request *HuichengTestGraySevenRequest) {
	request = &HuichengTestGraySevenRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("AmpTest", "2020-12-30", "HuichengTestGraySeven", "AmpTest", "openAPI")
	request.Method = requests.POST
	return
}

// CreateHuichengTestGraySevenResponse creates a response to parse from HuichengTestGraySeven response
func CreateHuichengTestGraySevenResponse() (response *HuichengTestGraySevenResponse) {
	response = &HuichengTestGraySevenResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
