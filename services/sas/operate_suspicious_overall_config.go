package sas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// OperateSuspiciousOverallConfig invokes the sas.OperateSuspiciousOverallConfig API synchronously
func (client *Client) OperateSuspiciousOverallConfig(request *OperateSuspiciousOverallConfigRequest) (response *OperateSuspiciousOverallConfigResponse, err error) {
	response = CreateOperateSuspiciousOverallConfigResponse()
	err = client.DoAction(request, response)
	return
}

// OperateSuspiciousOverallConfigWithChan invokes the sas.OperateSuspiciousOverallConfig API asynchronously
func (client *Client) OperateSuspiciousOverallConfigWithChan(request *OperateSuspiciousOverallConfigRequest) (<-chan *OperateSuspiciousOverallConfigResponse, <-chan error) {
	responseChan := make(chan *OperateSuspiciousOverallConfigResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.OperateSuspiciousOverallConfig(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// OperateSuspiciousOverallConfigWithCallback invokes the sas.OperateSuspiciousOverallConfig API asynchronously
func (client *Client) OperateSuspiciousOverallConfigWithCallback(request *OperateSuspiciousOverallConfigRequest, callback func(response *OperateSuspiciousOverallConfigResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *OperateSuspiciousOverallConfigResponse
		var err error
		defer close(result)
		response, err = client.OperateSuspiciousOverallConfig(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// OperateSuspiciousOverallConfigRequest is the request struct for api OperateSuspiciousOverallConfig
type OperateSuspiciousOverallConfigRequest struct {
	*requests.RpcRequest
	Type                       string           `position:"Query" name:"Type"`
	SourceIp                   string           `position:"Query" name:"SourceIp"`
	Lang                       string           `position:"Query" name:"Lang"`
	ResourceDirectoryAccountId string           `position:"Query" name:"ResourceDirectoryAccountId"`
	NoTargetAsOn               requests.Boolean `position:"Query" name:"NoTargetAsOn"`
	Config                     string           `position:"Query" name:"Config"`
}

// OperateSuspiciousOverallConfigResponse is the response struct for api OperateSuspiciousOverallConfig
type OperateSuspiciousOverallConfigResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateOperateSuspiciousOverallConfigRequest creates a request to invoke OperateSuspiciousOverallConfig API
func CreateOperateSuspiciousOverallConfigRequest() (request *OperateSuspiciousOverallConfigRequest) {
	request = &OperateSuspiciousOverallConfigRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Sas", "2018-12-03", "OperateSuspiciousOverallConfig", "", "")
	request.Method = requests.POST
	return
}

// CreateOperateSuspiciousOverallConfigResponse creates a response to parse from OperateSuspiciousOverallConfig response
func CreateOperateSuspiciousOverallConfigResponse() (response *OperateSuspiciousOverallConfigResponse) {
	response = &OperateSuspiciousOverallConfigResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
