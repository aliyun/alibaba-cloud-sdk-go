package scdn

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeScdnDomainHitRateData invokes the scdn.DescribeScdnDomainHitRateData API synchronously
func (client *Client) DescribeScdnDomainHitRateData(request *DescribeScdnDomainHitRateDataRequest) (response *DescribeScdnDomainHitRateDataResponse, err error) {
	response = CreateDescribeScdnDomainHitRateDataResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeScdnDomainHitRateDataWithChan invokes the scdn.DescribeScdnDomainHitRateData API asynchronously
func (client *Client) DescribeScdnDomainHitRateDataWithChan(request *DescribeScdnDomainHitRateDataRequest) (<-chan *DescribeScdnDomainHitRateDataResponse, <-chan error) {
	responseChan := make(chan *DescribeScdnDomainHitRateDataResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeScdnDomainHitRateData(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeScdnDomainHitRateDataWithCallback invokes the scdn.DescribeScdnDomainHitRateData API asynchronously
func (client *Client) DescribeScdnDomainHitRateDataWithCallback(request *DescribeScdnDomainHitRateDataRequest, callback func(response *DescribeScdnDomainHitRateDataResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeScdnDomainHitRateDataResponse
		var err error
		defer close(result)
		response, err = client.DescribeScdnDomainHitRateData(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeScdnDomainHitRateDataRequest is the request struct for api DescribeScdnDomainHitRateData
type DescribeScdnDomainHitRateDataRequest struct {
	*requests.RpcRequest
	DomainName string `position:"Query" name:"DomainName"`
	EndTime    string `position:"Query" name:"EndTime"`
	Interval   string `position:"Query" name:"Interval"`
	StartTime  string `position:"Query" name:"StartTime"`
}

// DescribeScdnDomainHitRateDataResponse is the response struct for api DescribeScdnDomainHitRateData
type DescribeScdnDomainHitRateDataResponse struct {
	*responses.BaseResponse
	EndTime            string             `json:"EndTime" xml:"EndTime"`
	StartTime          string             `json:"StartTime" xml:"StartTime"`
	RequestId          string             `json:"RequestId" xml:"RequestId"`
	DomainName         string             `json:"DomainName" xml:"DomainName"`
	DataInterval       string             `json:"DataInterval" xml:"DataInterval"`
	HitRatePerInterval HitRatePerInterval `json:"HitRatePerInterval" xml:"HitRatePerInterval"`
}

// CreateDescribeScdnDomainHitRateDataRequest creates a request to invoke DescribeScdnDomainHitRateData API
func CreateDescribeScdnDomainHitRateDataRequest() (request *DescribeScdnDomainHitRateDataRequest) {
	request = &DescribeScdnDomainHitRateDataRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("scdn", "2017-11-15", "DescribeScdnDomainHitRateData", "", "")
	request.Method = requests.POST
	return
}

// CreateDescribeScdnDomainHitRateDataResponse creates a response to parse from DescribeScdnDomainHitRateData response
func CreateDescribeScdnDomainHitRateDataResponse() (response *DescribeScdnDomainHitRateDataResponse) {
	response = &DescribeScdnDomainHitRateDataResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
