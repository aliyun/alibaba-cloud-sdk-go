//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package iot

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// QueryLoRaJoinPermissions invokes the iot.QueryLoRaJoinPermissions API synchronously
// api document: https://help.aliyun.com/api/iot/querylorajoinpermissions.html
func (client *Client) QueryLoRaJoinPermissions(request *QueryLoRaJoinPermissionsRequest) (response *QueryLoRaJoinPermissionsResponse, err error) {
	response = CreateQueryLoRaJoinPermissionsResponse()
	err = client.DoAction(request, response)
	return
}

// QueryLoRaJoinPermissionsWithChan invokes the iot.QueryLoRaJoinPermissions API asynchronously
// api document: https://help.aliyun.com/api/iot/querylorajoinpermissions.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) QueryLoRaJoinPermissionsWithChan(request *QueryLoRaJoinPermissionsRequest) (<-chan *QueryLoRaJoinPermissionsResponse, <-chan error) {
	responseChan := make(chan *QueryLoRaJoinPermissionsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QueryLoRaJoinPermissions(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// QueryLoRaJoinPermissionsWithCallback invokes the iot.QueryLoRaJoinPermissions API asynchronously
// api document: https://help.aliyun.com/api/iot/querylorajoinpermissions.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) QueryLoRaJoinPermissionsWithCallback(request *QueryLoRaJoinPermissionsRequest, callback func(response *QueryLoRaJoinPermissionsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QueryLoRaJoinPermissionsResponse
		var err error
		defer close(result)
		response, err = client.QueryLoRaJoinPermissions(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// QueryLoRaJoinPermissionsRequest is the request struct for api QueryLoRaJoinPermissions
type QueryLoRaJoinPermissionsRequest struct {
	*requests.RpcRequest
	AccessKeyId   string `position:"Query" name:"AccessKeyId"`
	IotInstanceId string `position:"Query" name:"IotInstanceId"`
}

// QueryLoRaJoinPermissionsResponse is the response struct for api QueryLoRaJoinPermissions
type QueryLoRaJoinPermissionsResponse struct {
	*responses.BaseResponse
	RequestId       string                                   `json:"RequestId" xml:"RequestId"`
	Success         bool                                     `json:"Success" xml:"Success"`
	Code            string                                   `json:"Code" xml:"Code"`
	ErrorMessage    string                                   `json:"ErrorMessage" xml:"ErrorMessage"`
	ProductKey      string                                   `json:"ProductKey" xml:"ProductKey"`
	JoinPermissions QueryLoRaJoinPermissionsJoinPermissions0 `json:"JoinPermissions" xml:"JoinPermissions"`
}

type QueryLoRaJoinPermissionsJoinPermissions0 struct {
	JoinPermission []QueryLoRaJoinPermissionsJoinPermission1 `json:"JoinPermission" xml:"JoinPermission"`
}

type QueryLoRaJoinPermissionsJoinPermission1 struct {
	JoinPermissionId   string `json:"JoinPermissionId" xml:"JoinPermissionId"`
	JoinPermissionName string `json:"JoinPermissionName" xml:"JoinPermissionName"`
	JoinPermissionType string `json:"JoinPermissionType" xml:"JoinPermissionType"`
	OwnerAliyunPk      string `json:"OwnerAliyunPk" xml:"OwnerAliyunPk"`
	Enabled            bool   `json:"Enabled" xml:"Enabled"`
	ClassMode          string `json:"ClassMode" xml:"ClassMode"`
}

// CreateQueryLoRaJoinPermissionsRequest creates a request to invoke QueryLoRaJoinPermissions API
func CreateQueryLoRaJoinPermissionsRequest() (request *QueryLoRaJoinPermissionsRequest) {
	request = &QueryLoRaJoinPermissionsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Iot", "2018-01-20", "QueryLoRaJoinPermissions", "iot", "openAPI")
	return
}

// CreateQueryLoRaJoinPermissionsResponse creates a response to parse from QueryLoRaJoinPermissions response
func CreateQueryLoRaJoinPermissionsResponse() (response *QueryLoRaJoinPermissionsResponse) {
	response = &QueryLoRaJoinPermissionsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
